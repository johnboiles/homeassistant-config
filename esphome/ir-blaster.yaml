esphome:
  name: ir-blaster
  platform: ESP8266
  board: d1_mini
  platformio_options:
    board_build.f_cpu: 160000000L

packages:
  common: !include common/common.yaml

# Enable Home Assistant API
api:
  services:
    - service: transmit_nec
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_nec:
            address: !lambda 'return address;'
            command: !lambda 'return command;'
    # I'm not sure how to use jinja {% if %} statements and return an int,
    # So instead I'm using an alternate method that accepts a string for command
    - service: transmit_nec_string
      variables:
        address: int
        command: string
      then:
        - remote_transmitter.transmit_nec:
            address: !lambda 'return address;'
            command: !lambda 'return (int)strtol(command.c_str(), NULL, 16);'
    - service: transmit_raw
      variables:
        code: int[]
        carrier_frequency: float
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: !lambda 'return carrier_frequency;'
    - service: transmit_raw_repeat
      variables:
        code: int[]
        carrier_frequency: float
        repeat_times: int
        repeat_wait_time_us: int
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: !lambda 'return carrier_frequency;'
            repeat:
              times: !lambda 'return repeat_times;'
              wait_time: !lambda 'return repeat_wait_time_us;'

remote_transmitter:
  pin: D0
  carrier_duty_percent: 50%

# Useful for debugging or investigating new IR codes
# remote_receiver:
#   pin:
#     number: D2
#     inverted: True
#   dump: all
#   # Settings to optimize recognition of RF devices (only uncomment for RF)
#   tolerance: 50%
#   filter: 250us
#   idle: 4ms
#   buffer_size: 2kb

external_components:
  - source: github://johnboiles/esphome-hdmi-cec

hdmi_cec:
  address: 0x05 # Audio system
  physical_address: 0x4000
  pin: D1 # GPIO5
  on_message:
    - opcode: 0xC3 # Request ARC start
      then:
        - hdmi_cec.send: # Report ARC started
            destination: 0x0
            data: [ 0xC1 ]
    - opcode: 0x70 # System audio mode request
      then:
        - hdmi_cec.send:
            destination: 0xF
            data: [ 0x72, 0x01 ]
    # We can provide mute status and volume here but we don't know
    # What it is, so instead provide nothing
    # - opcode: 0x71 # Give audio status
    #   then:
    #     - hdmi_cec.send:
    #         destination: 0x0
    #         # data: [ 0x7A, 0x7F ]
    #         data: [ 0x00, 0x00, 0x00 ]
    - opcode: 0x7D # Give audio system mode status
      then:
        - hdmi_cec.send:
            destination: 0x0
            data: [ 0x7E, 0x01 ]
    - opcode: 0x46 # Give OSD name
      then:
        - hdmi_cec.send:
            destination: 0x0
            data: [0x47, 0x65, 0x73, 0x70, 0x68, 0x6F, 0x6D, 0x65] # esphome
    - opcode: 0x8C # Give device Vendor ID
      then:
        - hdmi_cec.send:
            destination: 0xF
            data: [0x87, 0x00, 0x15, 0x82]
    - data: [0x44, 0x41] # User control pressed: volume up
      then:
        - logger.log: "Volume up"
        - remote_transmitter.transmit_nec:
            address: 0xFF00
            command: 0xBE41
    - data: [0x44, 0x42] # User control pressed: volume down
      then:
        - logger.log: "Volume down"
        - remote_transmitter.transmit_nec:
            address: 0xFF00
            command: 0xBA45
    - data: [0x44, 0x43] # User control pressed: volume mute
      then:
        - logger.log: "Volume mute"
        - remote_transmitter.transmit_nec:
            address: 0xFF00
            command: 0xB748
