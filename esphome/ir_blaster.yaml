esphome:
  name: ir_blaster
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "IRBlaster Fallback Hotspot"
    password: !secret wifi_ap_password

captive_portal:

# Enable logging
logger:

ota:

# Enable Home Assistant API
api:
  services:
    - service: transmit_nec
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_nec:
            address: !lambda 'return address;'
            command: !lambda 'return command;'
    # I'm not sure how to use jinja {% if %} statements and return an int,
    # So instead I'm using an alternate method that accepts a string for command
    - service: transmit_nec_string
      variables:
        address: int
        command: string
      then:
        - remote_transmitter.transmit_nec:
            address: !lambda 'return address;'
            command: !lambda 'return (int)strtol(command.c_str(), NULL, 16);'
    - service: transmit_raw
      variables:
        code: int[]
        carrier_frequency: float
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: !lambda 'return carrier_frequency;'
    - service: transmit_raw_repeat
      variables:
        code: int[]
        carrier_frequency: float
        repeat_times: int
        repeat_wait_time_us: int
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: !lambda 'return carrier_frequency;'
            repeat:
              times: !lambda 'return repeat_times;'
              wait_time: !lambda 'return repeat_wait_time_us;'

remote_transmitter:
  pin: D0
  carrier_duty_percent: 50%

# Useful for debugging or investigating new IR codes
# remote_receiver:
#   pin:
#     number: D2
#     inverted: True
#   dump: all
#   # Settings to optimize recognition of RF devices (only uncomment for RF)
#   tolerance: 50%
#   filter: 250us
#   idle: 4ms
#   buffer_size: 2kb
